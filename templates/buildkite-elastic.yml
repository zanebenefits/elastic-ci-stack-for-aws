## Provides the infrastructure for a scalable buildkite cluster

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Buildkite Configuration
        Parameters:
        - BuildkiteAgentRelease
        - BuildkiteAgentImage
        - BuildkiteAgentToken
        - BuildkiteQueue
        - BuildkiteOrgSlug
        - BuildkiteApiAccessToken

      - Label:
          default: Network Configuration
        Parameters:
        - VpcId
        - Subnets
        - AvailabilityZones
        - SecurityGroupId

      - Label:
          default: Instance Configuration
        Parameters:
        - ImageId
        - InstanceType
        - AgentsPerInstance
        - KeyName
        - SpotPrice
        - SecretsBucket
        - ArtifactsBucket
        - AuthorizedUsersUrl
        - BootstrapScriptUrl
        - RootVolumeSize
        - AssociatePublicIpAddress
        - ManagedPolicyARN

      - Label:
          default: Auto-scaling Configuration
        Parameters:
        - DesiredCapacity
        - MinSize
        - MaxSize
        - ScaleUpAdjustment
        - ScaleDownAdjustment

      - Label:
          default: Docker Registry Configuration
        Parameters:
        - ECRAccessPolicy

Parameters:
  KeyName:
    Description: SSH keypair used to access the buildkite instances
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1

  BuildkiteAgentRelease:
    Description: The release of the Buildkite agent to use, corresponds to a tag from https://hub.docker.com/r/buildkite/agent/tags/
    Type: String
    AllowedValues:
      - stable
      - beta
      - edge
    Default: "stable"

  BuildkiteAgentImage:
    Description: The docker image to use for the agents
    Type: String
    Default: "buildkite/agent"

  BuildkiteAgentToken:
    Description: Buildkite agent token
    Type: String
    NoEcho: true
    MinLength: 1

  BuildkiteOrgSlug:
    Description: Buildkite organization slug
    Type: String
    MinLength: 1

  BuildkiteApiAccessToken:
    Description: Buildkite API access token with read_pipelines, read_builds and read_agents (required for metrics)
    Type: String
    NoEcho: true
    MinLength: 1

  BuildkiteQueue:
    Description: Queue name that agents will use, targeted in pipeline steps using "queue={value}"
    Type: String
    Default: default
    MinLength: 1

  AgentsPerInstance:
    Description: Number of Buildkite agents to run on each instance
    Type: Number
    Default: 1
    MinValue: 1

  SecretsBucket:
    Description: Optional - Name of an existing S3 bucket containing pipeline secrets
    Type: String
    Default: ""

  ArtifactsBucket:
    Description: Optional - Name of an existing S3 bucket for build artifact storage
    Type: String
    Default: ""

  BootstrapScriptUrl:
    Description: Optional - HTTPS or S3 URL to run on each instance during boot
    Type: String
    Default: ""

  AuthorizedUsersUrl:
    Description: Optional - HTTPS or S3 URL to periodically download ssh authorized_keys from
    Type: String
    Default: ""

  VpcId:
    Type: String
    Description: Optional - Id of an existing VPC to launch instances into. Leave blank to have a new VPC created
    Default: ""

  Subnets:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of two existing VPC subnet ids where EC2 instances will run. Required if setting VpcId.
    Default: ""

  AvailabilityZones:
    Type: CommaDelimitedList
    Description: Optional - Comma separated list of AZs that subnets are created in (if Subnets parameter is not specified)
    Default: ""

  InstanceType:
    Description: Instance type
    Type: String
    Default: t2.nano
    MinLength: 1

  SpotPrice:
    Description: Spot bid price to use for the instances. 0 means normal (non-spot) instances
    Type: String
    Default: 0

  DesiredCapacity:
    Description: Desired number of instances to start with
    Type: Number
    Default: 0
    MinValue: 0

  MaxSize:
    Description: Maximum number of instances
    Type: Number
    Default: 10
    MinValue: 1

  MinSize:
    Description: Minimum number of instances
    Type: Number
    Default: 0

  ScaleUpAdjustment:
    Description: Number of instances to add on scale up events (ScheduledJobsCount > 0 for 1 min)
    Type: Number
    Default: 5
    MinValue: 0

  ScaleDownAdjustment:
    Description: Number of instances to remove on scale down events (UnfinishedJobs == 0 for 30 mins)
    Type: Number
    Default: -1
    MaxValue: 0

  RootVolumeSize:
    Description: Size of each instance's root EBS volume (in GB)
    Type: Number
    Default: 250
    MinValue: 10

  SecurityGroupId:
    Type: String
    Description: Optional - Security group id to assign to instances
    Default: ""

  ImageId:
    Type: String
    Description: Optional - Custom AMI to use for instances (must be based on the stack's AMI)
    Default: ""

  ManagedPolicyARN:
    Type: String
    Description: Optional - ARN of a managed IAM policy to attach to the instance role
    Default: ""

  ECRAccessPolicy:
    Type: String
    Description: ECR access policy to give container instances
    AllowedValues:
      - none
      - readonly
      - poweruser
      - full
    Default: "none"

  AssociatePublicIpAddress:
    Type: String
    Description: Associate instances with public IP addresses
    AllowedValues:
      - true
      - false
    Default: "true"

Conditions:
    UseSpotInstances:
      !Not [ !Equals [ $(SpotPrice), 0 ] ]

    CreateVpcResources:
      !Equals [ $(VpcId), "" ]

    CreateSecurityGroup:
      !Equals [ $(SecurityGroupId), "" ]

    UseSpecifiedAvailabilityZones:
      !Not [ !Equals [ !Join [ "", $(AvailabilityZones) ], "" ]  ]

    UseSecretsBucket:
      !Not [ !Equals [ $(SecretsBucket), "" ] ]

    UseArtifactsBucket:
      !Not [ !Equals [ $(ArtifactsBucket), "" ] ]

    UseDefaultAMI:
      !Equals [ $(ImageId), "" ]

    UseManagedPolicyARN:
      !Not [ !Equals [ $(ManagedPolicyARN), "" ] ]

    UseECR:
      !Not [ !Equals [ $(ECRAccessPolicy), "none" ] ]

    UseAutoscaling:
      !Not [ !Equals [ $(MaxSize), $(MinSize) ] ]

    CreateMetricsStack:
      !And [ Condition: UseAutoscaling, !Not [ !Equals [ $(BuildkiteApiAccessToken), "" ] ] ]

Mappings:
  ECRManagedPolicy:
    none      : { Policy: '' }
    readonly  : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly' }
    poweruser : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser' }
    full      : { Policy: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess' }

  MetricsLambdaBucket:
    us-east-1 : { Bucket: "buildkite-metrics" }
    us-east-2 : { Bucket: "buildkite-metrics-us-east-2" }
    us-west-1 : { Bucket: "buildkite-metrics-us-west-1" }
    us-west-2 : { Bucket: "buildkite-metrics-us-west-2" }
    eu-west-1 : { Bucket: "buildkite-metrics-eu-west-1" }
    eu-west-2 : { Bucket: "buildkite-metrics-eu-west-2" }
    eu-central-1 : { Bucket: "buildkite-metrics-eu-central-1" }
    ap-northeast-1 : { Bucket: "buildkite-metrics-ap-northeast-1" }
    ap-northeast-2 : { Bucket: "buildkite-metrics-ap-northeast-2" }
    ap-southeast-1 : { Bucket: "buildkite-metrics-ap-southeast-1" }
    ap-southeast-2 : { Bucket: "buildkite-metrics-ap-southeast-2" }
    ap-south-1 : { Bucket: "buildkite-metrics-ap-south-1" }
    sa-east-1 : { Bucket: "buildkite-metrics-sa-east-1" }


Resources:
  # Allow ec2 instances to assume a role and be granted the IAMPolicies
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ $(IAMRole) ]

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "$(AWS::StackName)-Role"
      ManagedPolicyArns:
        - !If [ UseManagedPolicyARN, $(ManagedPolicyARN), '$(AWS::NoValue)' ]
        - !If [ UseECR, '$(ECRManagedPolicy[$(ECRAccessPolicy)][Policy])', '$(AWS::NoValue)' ]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:RecordLifecycleActionHeartbeat
              - autoscaling:CompleteLifecycleAction
              - autoscaling:SetInstanceHealth
            Resource: "*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: "*"

      Roles:
        - $(IAMRole)

  SecretsBucketPolicies:
    Type: AWS::IAM::Policy
    Condition: UseSecretsBucket
    Properties:
      PolicyName: SecretsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Get*
              - s3:Get
              - s3:List*
            Resource:
              - "arn:aws:s3:::$(SecretsBucket)/*"
              - "arn:aws:s3:::$(SecretsBucket)"
      Roles:
        - $(IAMRole)

  ArtifactsBucketPolicies:
    Type: AWS::IAM::Policy
    Condition: UseArtifactsBucket
    Properties:
      PolicyName: ArtifactsBucketPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:Put*
              - s3:List*
              - s3:Get*
            Resource:
              - "arn:aws:s3:::$(ArtifactsBucket)/*"
              - "arn:aws:s3:::$(ArtifactsBucket)"
      Roles:
        - $(IAMRole)

  AgentLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: $(AssociatePublicIpAddress)
      SecurityGroups: [ !If [ "CreateSecurityGroup", $(SecurityGroup), $(SecurityGroupId) ] ]
      KeyName : $(KeyName)
      IamInstanceProfile: $(IAMInstanceProfile)
      InstanceType: $(InstanceType)
      SpotPrice: !If [ "UseSpotInstances", $(SpotPrice), '$(AWS::NoValue)' ]
      ImageId : !If [
        "UseDefaultAMI",
        "$(AWSRegion2AMI[$(AWS::Region)][AMI])",
        $(ImageId)
      ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs: { VolumeSize: $(RootVolumeSize), VolumeType: gp2 }
      UserData: !Base64 |
        #!/bin/bash -xv
        BUILDKITE_STACK_NAME="$(AWS::StackName)" \
        BUILDKITE_STACK_VERSION=dev \
        BUILDKITE_SECRETS_BUCKET="$(SecretsBucket)" \
        BUILDKITE_AGENT_TOKEN="$(BuildkiteAgentToken)" \
        BUILDKITE_AGENTS_PER_INSTANCE="$(AgentsPerInstance)" \
        BUILDKITE_AGENT_RELEASE="$(BuildkiteAgentRelease)" \
        BUILDKITE_AGENT_IMAGE="$(BuildkiteAgentImage)" \
        BUILDKITE_QUEUE="$(BuildkiteQueue)" \
        BUILDKITE_ELASTIC_BOOTSTRAP_SCRIPT="$(BootstrapScriptUrl)" \
        BUILDKITE_AUTHORIZED_USERS_URL="$(AuthorizedUsersUrl)" \
        BUILDKITE_ECR_POLICY=$(ECRAccessPolicy) \
        AWS_DEFAULT_REGION=$(AWS::Region) \
        AWS_REGION=$(AWS::Region) \
          /usr/local/bin/bk-install-elastic-stack.sh

  # XXX: We don't even want a topic or role, but CloudFormation requires them
  # to create a lifecycle hook.
  AgentLifecycleTopic:
    Type: AWS::SNS::Topic

  AgentLifecycleHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ autoscaling.amazonaws.com ]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AgentLifecyclePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: $(AgentLifecycleTopic)
      Path: /

  AgentLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: $(AgentAutoScaleGroup)
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      NotificationTargetARN: $(AgentLifecycleTopic)
      RoleARN: $(AgentLifecycleHookRole[Arn])

  AgentAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If [
        "CreateVpcResources",
        [ $(Subnet0), $(Subnet1) ],
        $(Subnets)
      ]
      LaunchConfigurationName: $(AgentLaunchConfiguration)
      DesiredCapacity: $(DesiredCapacity)
      MinSize: $(MinSize)
      MaxSize: $(MaxSize)
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupInServiceInstances
            - GroupTerminatingInstances
            - GroupPendingInstances
      TerminationPolicies:
        - OldestLaunchConfiguration
        - ClosestToNextInstanceHour
      Tags:
        - Key: Role
          Value: buildkite-agent
          PropagateAtLaunch: true
        - Key: Name
          Value: buildkite-agent
          PropagateAtLaunch: true
        - Key: BuildkiteAgentRelease
          Value: $(BuildkiteAgentRelease)
          PropagateAtLaunch: true
        - Key: BuildkiteQueue
          Value: $(BuildkiteQueue)
          PropagateAtLaunch: true

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: $(MinSize)
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 5
        # On rollback this might have to wait for an agent to finish
        # a job. The agent's init script waits 30 minutes, so we wait
        # a maximum of 40 minutes to be safe.
        PauseTime: PT40M
        WaitOnResourceSignals: true
        # Ignore scaling alarms during update
        SuspendProcesses:
          - AlarmNotification
          - ScheduledActions

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateSecurityGroup
    Properties:
      GroupDescription: Enable access to SSH
      VpcId: !If [ "CreateVpcResources", $(Vpc), $(VpcId) ]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: $(AWS::StackName)
